/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        int size = lists.length;
        return divide(0,size-1,lists);
    }
    public ListNode mergeSortedList(ListNode l1, ListNode l2){
        if(l1==null) return l2;
        if(l2 == null) return l1;
        if(l1.val<=l2.val){
            l1.next = mergeSortedList(l1.next, l2);
            return l1;
        }
        else{
            l2.next = mergeSortedList(l1,l2.next);
            return l2;
        }
    }
    public ListNode divide(int low, int high, ListNode[] lists){
        if(low>high) return null;
        if(low==high){
            return lists[low];
        }
        int mid = low+(high-low)/2;
        ListNode l1 = divide(low,mid,lists);
        ListNode l2 = divide(mid+1,high, lists);
        return mergeSortedList(l1,l2);
    }
}