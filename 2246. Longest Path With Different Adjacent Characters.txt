class Solution {

    /* Variable to store the length of the longest path */

    int longestPathValue = 1;

    public int longestPath(int[] parent, String s) {

        /* Creating the adjacency list */

        Map<Integer, List<Integer>> adj = new HashMap<>();
        for(int i = 1; i < parent.length; i++){
            int j = parent[i];
            adj.putIfAbsent(j, new LinkedList<>());
            adj.get(j).add(i);
        }
        dfs(0, adj, s);
        return longestPathValue;
    }

    public int dfs(int node, Map<Integer, List<Integer>> adj, String s){

        /* If the node is a leaf node the return 1 */
        
        if(!adj.containsKey(node)) return 1;
        int max = 0, secondMax = 0;
        for(int nbrNode : adj.get(node)){
            int longestPathFromNbrNode = dfs(nbrNode , adj, s);

            /* if the characters at the current node and its neighbor are the same, ignore the neighbor */

            if(s.charAt(node) == s.charAt(nbrNode)) continue;
            
            /* update max and secondMax with the longest path from the neighbor node */
            
            if(longestPathFromNbrNode > max){
                secondMax = max;
                max = longestPathFromNbrNode;
            }else if(longestPathFromNbrNode > secondMax){
                secondMax = longestPathFromNbrNode;
            }
        }

        /* update longestPathValue with the longest path that includes the current node */
        
        longestPathValue = Math.max(longestPathValue, max+secondMax+1);
        return max+1;
    }
}
